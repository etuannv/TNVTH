@model TNVBABY.Web.Models.T_Video

@{
    ViewBag.Title = "Sửa";
}

@section header {
    <h1>
        <span>Video</span>
        <small>Sửa</small>
    </h1>
}

<div class="row">
    <!-- form start -->
    @using (Html.BeginForm("Edit", "AdminVideo", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
    <!-- left column -->
        <div class="col-md-7">
            <!-- general form elements -->
            <div class="box box-primary">
                <div class="box-header">
                    @Html.ValidationSummary()
                </div><!-- /.box-header -->

                <div class="box-body">
                    <div class="form-group focus">
                        <label>@if (Model.IsPlaylist) { <span>Playlist</span>}
                        YoutubeID</label>
                        @Html.TextBoxFor(m => m.YoutubeID, new { @class = "form-control", onfocusout = "myBlurFunction()", placeholder = "Nhập YoutubeID" })
                        @Html.ValidationMessageFor(model => model.Title)
                    </div>
                    <div class="form-group">
                        <label>Phân loại</label>
                        @Html.DropDownList("CateID", null, null, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        <label>Tên</label>
                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control", placeholder = "Nhập tên" })
                        @Html.ValidationMessageFor(model => model.Title)
                    </div>
                    <div class="form-group">
                        <label>Slug</label>
                        @Html.TextBoxFor(m => m.Slug, new { @class = "form-control", placeholder = "Nhập slug" })
                        @Html.ValidationMessageFor(model => model.Slug)
                    </div>
                    <div class="form-group">
                        <label>Mô tả</label>
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control", placeholder = "Mô tả" })
                    </div>
                    <div class="form-group">
                        <label>Tag</label>
                        <input id="TagList" class="typeahead form-control" placeholder="Nhập tag" value="@ViewBag.TagList" name="TagList" type="text">
                    </div>

                    <div class="form-group">
                        <label>Hoạt động</label>
                        @Html.CheckBoxFor(m => m.Enable, new { @class = "" })
                    </div>

                </div><!-- /.box-body -->
                <div class="box-footer">
                    @*@Html.ActionLink(
                        "Quay lại",
                        "List",
                        "AdminVideo",
                            null,
                            new { @class = "btn btn-primary" })*@
                    <a class="btn btn-primary" onclick="history.go(-1); return false;" href="#">Quay lại</a>
                    <a class="btn btn-primary" href="/Admin/AdminVideo/Delete/@Model.ID">Bỏ qua</a>
                    <button type="submit" class="btn btn-primary">Lưu</button>
                    <button type="submit" name="Next" value="Next" class="btn btn-primary">Lưu & Tiếp</button>
                </div>

            </div><!-- /.box -->
            <!-- Form Element sizes -->
        </div><!--/.col (left) -->
    <!-- right column -->
        <div class="col-md-5">
            <!-- general form elements -->
            <div class="box box-solid">
                <div class="box-header with-border">
                    <h3 class="box-title">Thông tin Youtube</h3>
                </div><!-- /.box-header -->
                <div class="box-body">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.UThumbnail, new { @class = "form-control", @style = "display:none;", placeholder = "Thumnail url" })
                        @*<img id="imgThumb" src="@Model.UThumbnail" />*@
                        @if (Model.IsPlaylist)
                        {
                            <iframe type='text/html' width="100%" height="240" src="//www.youtube.com/embed/videoseries?list=@Model.YoutubeID" frameborder="0" allowfullscreen></iframe>
                        }
                        else
                        {
                            <iframe width="100%" height="240" src="//www.youtube.com/embed/@Model.YoutubeID" frameborder="0" allowfullscreen></iframe>
                        }
                    </div>

                    <div class="form-group">
                        <label>Title</label>
                        @Html.TextBoxFor(m => m.UTitle, new { @class = "form-control", placeholder = "Title" })
                    </div>
                    <div class="form-group">
                        <label>Youtube Chanel ID</label>
                        @Html.TextBoxFor(m => m.UChanelID, new { @class = "form-control", placeholder = "Youtube chanel ID" })
                    </div>
                    <div class="form-group">
                        <label>Youtube Category ID</label>
                        @Html.TextBoxFor(m => m.UCategoryId, new { @class = "form-control", placeholder = "Youtube Category ID" })
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        @Html.TextAreaFor(m => m.UDescription, new { @class = "form-control", placeholder = "Description" })
                    </div>
                    <div class="form-group">
                        <label>Duration</label>
                        @Html.TextBoxFor(m => m.UDuration, new { @class = "form-control", placeholder = "Duration" })
                    </div>
                    <div class="form-group">
                        <label>Like</label>
                        @Html.TextBoxFor(m => m.ULiked, new { @class = "form-control", placeholder = "Liked" })
                    </div>
                    <div class="form-group">
                        <label>Dislike</label>
                        @Html.TextBoxFor(m => m.UDisliked, new { @class = "form-control", placeholder = "Disliked" })
                    </div>
                    <div class="form-group">
                        <label>View count</label>
                        @Html.TextBoxFor(m => m.UViewCount, new { @class = "form-control", placeholder = "View count" })
                    </div>

                    <div class="form-group">
                        <label>Tag</label>
                        @Html.TextBoxFor(m => m.UTags, new { @class = "form-control", placeholder = "Tag" })
                    </div>
                    <div class="form-group">
                        <label>Default Language</label>
                        @Html.TextBoxFor(m => m.UDefaultLanguage, new { @class = "form-control", placeholder = "Default Language" })
                    </div>
                    <div class="form-group">
                        <label>Latitude</label>
                        @Html.TextBoxFor(m => m.Ulatitude, new { @class = "form-control", placeholder = "Latitude" })
                    </div>
                    <div class="form-group">
                        <label>Longitude</label>
                        @Html.TextBoxFor(m => m.Ulongitude, new { @class = "form-control", placeholder = "Longitude" })
                    </div>


                </div><!-- /.box-body -->
            </div>

        </div>   <!-- /.row -->
    }
</div>   <!-- /.row -->
<script src="/Content/themes/admin/dist/js/custome.js"></script>
<script type="text/javascript">
    $("#Slug").focus(function () {
        genSlug();
    });

    function genSlug() {
        var title = $('#Title').val().trim();
        var myslug = slug(title);
        $('#Slug').val(myslug);
    }

    $("#YoutubeID")
  .focusout(function () {
      var slug = $('#Slug').val().trim();
      //If title not empty then return
      if (slug) return;
      $UID = $("#YoutubeID").val();
      $Gurl = 'https://www.googleapis.com/youtube/v3/videos?id=' + $UID + '&key=AIzaSyAtMDozZIcTuAAnRjDETFW7THiR5-zzqQA&part=snippet,contentDetails,statistics,player,recordingDetails,topicDetails';
      $.getJSON($Gurl, function (data) {
          if (data.items.length == 0) return;
          //Snippet
          if (data.items[0].hasOwnProperty('snippet')) {
              if (data.items[0].snippet.hasOwnProperty('title')) {
                  $("#UTitle").val(data.items[0].snippet.title);
                  $("#Title").val(data.items[0].snippet.title);
                  genSlug();
              }
              if (data.items[0].snippet.hasOwnProperty('channelId')) {
                  $("#UChanelID").val(data.items[0].snippet.channelId);
              }
              if (data.items[0].snippet.hasOwnProperty('categoryId')) {
                  $("#UCategoryId").val(data.items[0].snippet.categoryId);
              }
              if (data.items[0].snippet.hasOwnProperty('description')) {
                  $("#UDescription").val(data.items[0].snippet.description);
                  $("#Description").val(data.items[0].snippet.description);
              }
              if (data.items[0].snippet.hasOwnProperty('thumbnails')) {
                  if (data.items[0].snippet.thumbnails.hasOwnProperty('medium')) {
                      if (data.items[0].snippet.thumbnails.medium.hasOwnProperty('url')) {
                          $("#UThumbnail").val(data.items[0].snippet.thumbnails.medium.url);
                          $("#imgThumb").attr("src", data.items[0].snippet.thumbnails.medium.url);
                      }
                  }
              }
              if (data.items[0].snippet.hasOwnProperty('tags')) {
                  $tags = data.items[0].snippet.tags;
                  $taglist = '';
                  for (var i = 0; i < $tags.length; i++) {
                      $taglist += $tags[i];
                      $taglist += ',';
                      $('#TagList').tagsinput('add', $tags[i]);
                  }
                  $("#UTags").val($taglist);
                  //$("#TagList").val($taglist);
              }
              if (data.items[0].snippet.hasOwnProperty('defaultAudioLanguage')) {
                  $("#UDefaultLanguage").val(data.items[0].snippet.defaultAudioLanguage);
              }
          }
          //Content detail
          if (data.items[0].hasOwnProperty('contentDetails')) {
              if (data.items[0].contentDetails.hasOwnProperty('duration')) {
                  $("#UDuration").val(data.items[0].contentDetails.duration);
              }
          }
          //Statatic
          if (data.items[0].hasOwnProperty('statistics')) {
              if (data.items[0].statistics.hasOwnProperty('likeCount')) {
                  $("#ULiked").val(data.items[0].statistics.likeCount);
              }
              if (data.items[0].statistics.hasOwnProperty('dislikeCount')) {
                  $("#UDisliked").val(data.items[0].statistics.dislikeCount);
              }
              if (data.items[0].statistics.hasOwnProperty('viewCount')) {
                  $("#UViewCount").val(data.items[0].statistics.viewCount);
              }
          }

          //Recording detail
          if (data.items[0].hasOwnProperty('recordingDetails')) {
              if (data.items[0].recordingDetails.hasOwnProperty('location')) {
                  if (data.items[0].recordingDetails.location.hasOwnProperty('latitude')) {
                      $("#Ulatitude").val(data.items[0].recordingDetails.location.latitude);
                  }
                  if (data.items[0].recordingDetails.location.hasOwnProperty('longitude')) {
                      $("#Ulongitude").val(data.items[0].recordingDetails.location.longitude);
                  }
                  if (data.items[0].recordingDetails.location.hasOwnProperty('altitude')) {
                      $("#Ualtitude").val(data.items[0].recordingDetails.location.altitude);
                  }
              }
          }

      });
  })
</script>
<script>
    jQuery(document).ready(function ($) {

        var remoteUrl = "/Tag/GetTag/%QUERY";
        var myTypeaheadData = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Value'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            limit: 10,
            remote: {
                url: remoteUrl,
                wildcard: '%QUERY'
                //rateLimitWait: 250,
                //ajax: { cache: false }
            }
        });

        myTypeaheadData.initialize();
        $('#TagList').tagsinput({
            autocomplete: false,
            typeaheadjs: {
                name: 'myTypeaheadData',
                displayKey: 'Value',
                valueKey: 'Value',
                source: myTypeaheadData.ttAdapter()
            }
        });
    });
</script>